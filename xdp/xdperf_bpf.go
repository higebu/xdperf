// Code generated by bpf2go; DO NOT EDIT.

package xdp

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type XdperfDatarec struct {
	RxPackets uint64
	RxBytes   uint64
}

// LoadXdperf returns the embedded CollectionSpec for Xdperf.
func LoadXdperf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_XdperfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Xdperf: %w", err)
	}

	return spec, err
}

// LoadXdperfObjects loads Xdperf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*XdperfObjects
//	*XdperfPrograms
//	*XdperfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadXdperfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadXdperf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// XdperfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdperfSpecs struct {
	XdperfProgramSpecs
	XdperfMapSpecs
	XdperfVariableSpecs
}

// XdperfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdperfProgramSpecs struct {
	XdpCountPackets    *ebpf.ProgramSpec `ebpf:"xdp_count_packets"`
	XdpRedirectNotouch *ebpf.ProgramSpec `ebpf:"xdp_redirect_notouch"`
}

// XdperfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdperfMapSpecs struct {
	StatsMap *ebpf.MapSpec `ebpf:"stats_map"`
}

// XdperfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type XdperfVariableSpecs struct {
	Ifidx      *ebpf.VariableSpec `ebpf:"ifidx"`
	TargetPort *ebpf.VariableSpec `ebpf:"target_port"`
}

// XdperfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadXdperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdperfObjects struct {
	XdperfPrograms
	XdperfMaps
	XdperfVariables
}

func (o *XdperfObjects) Close() error {
	return _XdperfClose(
		&o.XdperfPrograms,
		&o.XdperfMaps,
	)
}

// XdperfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadXdperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdperfMaps struct {
	StatsMap *ebpf.Map `ebpf:"stats_map"`
}

func (m *XdperfMaps) Close() error {
	return _XdperfClose(
		m.StatsMap,
	)
}

// XdperfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadXdperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdperfVariables struct {
	Ifidx      *ebpf.Variable `ebpf:"ifidx"`
	TargetPort *ebpf.Variable `ebpf:"target_port"`
}

// XdperfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadXdperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type XdperfPrograms struct {
	XdpCountPackets    *ebpf.Program `ebpf:"xdp_count_packets"`
	XdpRedirectNotouch *ebpf.Program `ebpf:"xdp_redirect_notouch"`
}

func (p *XdperfPrograms) Close() error {
	return _XdperfClose(
		p.XdpCountPackets,
		p.XdpRedirectNotouch,
	)
}

func _XdperfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed xdperf_bpf.o
var _XdperfBytes []byte
